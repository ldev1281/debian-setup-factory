#!/bin/bash

@module logger.bash
@module docker-setup.bash
@module tor-setup.bash
@module tor-transparent-conf.bash
@module veracrypt-setup.bash
@module backup-tool-setup.bash
@module bitwarden-bws-setup.bash

# === Backup-tool (limbo-backup) interactive configuration ===

echo "Backup-tool settings:"
read -p "Configure backup-tool now? (yes/no) [${CONFIGURE_BACKUP_TOOL:-yes}]: " input
CONFIGURE_BACKUP_TOOL=${input:-${CONFIGURE_BACKUP_TOOL:-yes}}

if [[ "${CONFIGURE_BACKUP_TOOL,,}" == "yes" ]]; then
    BACKUP_CONFIG_FILE="/etc/limbo-backup/backup.conf.bash"
    RESTORE_CONFIG_FILE="/etc/limbo-backup/restore.conf.bash"

    # === Optional GPG encryption ===
    read -p "Use GPG encryption for backups? (yes/no) [${GPG_ENABLE:-yes}]: " input
    GPG_ENABLE=${input:-${GPG_ENABLE:-yes}}
    GPG_ENABLED=0
    GPG_FINGERPRINT=""
    if [[ "${GPG_ENABLE,,}" == "yes" ]]; then
        while :; do
            read -p "Path to ASCII-armored public GPG key file [.asc]: " GPG_PUBKEY_PATH
            if [[ -f "$GPG_PUBKEY_PATH" ]]; then
                # Derive fingerprint FIRST (without importing), then import into the current user's keyring (this script runs as root).
                GPG_FINGERPRINT=$(gpg --with-colons --import-options show-only --import "$GPG_PUBKEY_PATH" 2>/dev/null | awk -F: '/^fpr:/{print $10; exit}')
                if [[ -z "$GPG_FINGERPRINT" ]]; then
                    echo "Could not read a fingerprint from the provided key. Please provide a valid ASCII-armored public key."
                else
                    echo "Importing public key into keyring..."
                    gpg --batch --import "$GPG_PUBKEY_PATH" || {
                        echo "Public key import failed"
                        break
                    }
                    GPG_ENABLED=1
                    echo "GPG public key imported. Fingerprint: $GPG_FINGERPRINT"
                    break
                fi
            else
                echo "File not found: $GPG_PUBKEY_PATH"
            fi
        done
    fi

    while :; do
        read -p "Select protocol for uploading backups (sftp/s3) [${RCLONE_PROTO:-s3}]: " input
        RCLONE_PROTO=${input:-${RCLONE_PROTO:-s3}}
        if [[ "$RCLONE_PROTO" == "sftp" || "$RCLONE_PROTO" == "s3" ]]; then
            break
        else
            echo "Please enter 'sftp' or 's3'."
        fi
    done

    if [[ "$RCLONE_PROTO" == "sftp" ]]; then
        read -p "RCLONE_SFTP_REMOTE_PATH [${RCLONE_SFTP_REMOTE_PATH:-backups}]: " input
        RCLONE_SFTP_REMOTE_PATH=${input:-${RCLONE_SFTP_REMOTE_PATH:-backups}}

        read -p "RCLONE_SFTP_HOST [${RCLONE_SFTP_HOST:-your.remote.host}]: " input
        RCLONE_SFTP_HOST=${input:-${RCLONE_SFTP_HOST:-your.remote.host}}

        read -p "RCLONE_SFTP_PORT [${RCLONE_SFTP_PORT:-22}]: " input
        RCLONE_SFTP_PORT=${input:-${RCLONE_SFTP_PORT:-22}}

        read -p "RCLONE_SFTP_USER [${RCLONE_SFTP_USER:-backupuser}]: " input
        RCLONE_SFTP_USER=${input:-${RCLONE_SFTP_USER:-backupuser}}

        read -p "RCLONE_SFTP_PASS [${RCLONE_SFTP_PASS:-}]: " input
        RCLONE_SFTP_PASS=${input:-${RCLONE_SFTP_PASS:-}}

        BACKUP_CONFIG_LINES=(
            "GPG_ENABLED=${GPG_ENABLED}"
            "GPG_FINGERPRINT=\"${GPG_FINGERPRINT}\""
            "RCLONE_ENABLED=1"
            "RCLONE_PROTO=\"sftp\""
            "RCLONE_SFTP_REMOTE_PATH=\"${RCLONE_SFTP_REMOTE_PATH}\""
            "RCLONE_SFTP_HOST=\"${RCLONE_SFTP_HOST}\""
            "RCLONE_SFTP_PORT=\"${RCLONE_SFTP_PORT}\""
            "RCLONE_SFTP_USER=\"${RCLONE_SFTP_USER}\""
            "RCLONE_SFTP_PASS='${RCLONE_SFTP_PASS}'"
        )
        RESTORE_CONFIG_LINES=(
            "GPG_ENABLED=${GPG_ENABLED}"
        )
    fi

    if [[ "$RCLONE_PROTO" == "s3" ]]; then
        read -p "RCLONE_S3_PROVIDER [${RCLONE_S3_PROVIDER:-AWS}]: " input
        RCLONE_S3_PROVIDER=${input:-${RCLONE_S3_PROVIDER:-AWS}}

        read -p "RCLONE_S3_REMOTE_PATH [${RCLONE_S3_REMOTE_PATH:-backups}]: " input
        RCLONE_S3_REMOTE_PATH=${input:-${RCLONE_S3_REMOTE_PATH:-backups}}

        read -p "RCLONE_S3_ENDPOINT [${RCLONE_S3_ENDPOINT:-s3.example.com}]: " input
        RCLONE_S3_ENDPOINT=${input:-${RCLONE_S3_ENDPOINT:-s3.example.com}}

        read -p "RCLONE_S3_BUCKET [${RCLONE_S3_BUCKET:-}]: " input
        RCLONE_S3_BUCKET=${input:-${RCLONE_S3_BUCKET:-}}

        read -p "RCLONE_S3_KEY [${RCLONE_S3_KEY:-}]: " input
        RCLONE_S3_KEY=${input:-${RCLONE_S3_KEY:-}}

        read -p "RCLONE_S3_SECRET [${RCLONE_S3_SECRET:-}]: " input
        RCLONE_S3_SECRET=${input:-${RCLONE_S3_SECRET:-}}

        read -p "RCLONE_S3_NO_CHECK_BUCKET [${RCLONE_S3_NO_CHECK_BUCKET:-true}]: " input
        RCLONE_S3_NO_CHECK_BUCKET=${input:-${RCLONE_S3_NO_CHECK_BUCKET:-true}}

        BACKUP_CONFIG_LINES=(
            "GPG_ENABLED=${GPG_ENABLED}"
            "GPG_FINGERPRINT=\"${GPG_FINGERPRINT}\""
            "RCLONE_ENABLED=1"
            "RCLONE_PROTO=\"s3\""
            "RCLONE_S3_PROVIDER=\"${RCLONE_S3_PROVIDER}\""
            "RCLONE_S3_REMOTE_PATH=\"${RCLONE_S3_REMOTE_PATH}\""
            "RCLONE_S3_ENDPOINT=\"${RCLONE_S3_ENDPOINT}\""
            "RCLONE_S3_BUCKET=\"${RCLONE_S3_BUCKET}\""
            "RCLONE_S3_KEY='${RCLONE_S3_KEY}'"
            "RCLONE_S3_SECRET='${RCLONE_S3_SECRET}'"
            "RCLONE_S3_NO_CHECK_BUCKET=${RCLONE_S3_NO_CHECK_BUCKET}"
        )
        RESTORE_CONFIG_LINES=(
            "GPG_ENABLED=${GPG_ENABLED}"
        )

        if [[ "${RCLONE_S3_PROVIDER,,}" == "aws" ]]; then
            read -p "RCLONE_S3_REGION [${RCLONE_S3_REGION:-}]: " input
            RCLONE_S3_REGION=${input:-${RCLONE_S3_REGION:-}}

            read -p "RCLONE_S3_STORAGE_CLASS [${RCLONE_S3_STORAGE_CLASS:-STANDARD}]: " input
            RCLONE_S3_STORAGE_CLASS=${input:-${RCLONE_S3_STORAGE_CLASS:-STANDARD}}

            read -p "RCLONE_S3_ACL [${RCLONE_S3_ACL:-private}]: " input
            RCLONE_S3_ACL=${input:-${RCLONE_S3_ACL:-private}}

            read -p "RCLONE_S3_SERVER_SIDE_ENCRYPTION [${RCLONE_S3_SERVER_SIDE_ENCRYPTION:-AES256}]: " input
            RCLONE_S3_SERVER_SIDE_ENCRYPTION=${input:-${RCLONE_S3_SERVER_SIDE_ENCRYPTION:-AES256}}

            BACKUP_CONFIG_LINES+=(
                "RCLONE_S3_REGION=\"${RCLONE_S3_REGION}\""
                "RCLONE_S3_STORAGE_CLASS=\"${RCLONE_S3_STORAGE_CLASS}\""
                "RCLONE_S3_ACL=\"${RCLONE_S3_ACL}\""
                "RCLONE_S3_SERVER_SIDE_ENCRYPTION=\"${RCLONE_S3_SERVER_SIDE_ENCRYPTION}\""
            )
        fi
    fi

    echo ""
    echo "The following backup-tool configuration will be saved to ${BACKUP_CONFIG_FILE}:"
    echo "-----------------------------------------------------------------------"
    for line in "${BACKUP_CONFIG_LINES[@]}"; do
        echo "$line"
    done
    echo "-----------------------------------------------------------------------"
    echo ""

    echo "The following backup-tool configuration will be saved to ${RESTORE_CONFIG_FILE}:"
    echo "-----------------------------------------------------------------------"
    for line in "${RESTORE_CONFIG_LINES[@]}"; do
        echo "$line"
    done
    echo "-----------------------------------------------------------------------"
    echo ""

    read -p "Proceed with this configuration? (y/n): " CONFIRM
    echo ""
    if [[ "$CONFIRM" != "y" ]]; then
        echo "Backup-tool configuration aborted by user"
        echo "Server successfully configured"
        echo ""
        exit
    fi

    # Existing variables will be set with new values or not touched if they are already set. New variables will be appended to the config file
    for line in "${BACKUP_CONFIG_LINES[@]}"; do
        key=${line%%=*}
        repl=${line//&/\\&}
        repl=${repl//|/\\|}
        line_slash_esc=${line//\//\\/}
        sed -i \
            -e "/^[[:space:]]*${line_slash_esc}\$/ { h; b; }" \
            -e "/^[[:space:]]*${key}=/ { s|.*|${repl}|; h; }" \
            -e '$ { x; /./ { x; b; }; x; a\'$'\n'''"$line"''$'\n'' }' \
            "$BACKUP_CONFIG_FILE"
    done
    echo "Configuration saved to $BACKUP_CONFIG_FILE"
    echo ""

    # Existing variables will be set with new values or not touched if they are already set. New variables will be appended to the config file
    for line in "${RESTORE_CONFIG_LINES[@]}"; do
        key=${line%%=*}
        repl=${line//&/\\&}
        repl=${repl//|/\\|}
        line_slash_esc=${line//\//\\/}
        sed -i \
            -e "/^[[:space:]]*${line_slash_esc}\$/ { h; b; }" \
            -e "/^[[:space:]]*${key}=/ { s|.*|${repl}|; h; }" \
            -e '$ { x; /./ { x; b; }; x; a\'$'\n'''"$line"''$'\n'' }' \
            "$RESTORE_CONFIG_FILE"
    done
    echo "Configuration saved to $RESTORE_CONFIG_FILE"
    echo ""
fi

echo ""
echo "Server successfully configured"
